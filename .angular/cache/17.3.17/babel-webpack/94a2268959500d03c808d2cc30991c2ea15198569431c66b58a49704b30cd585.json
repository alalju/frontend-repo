{"ast":null,"code":"import { BehaviorSubject } from \"rxjs\";\nimport * as i0 from \"@angular/core\";\nexport class UserService {\n  usersSubject = new BehaviorSubject([]);\n  users$ = this.usersSubject.asObservable();\n  mockUsers = [{\n    id: 1,\n    name: \"Juan Pérez\",\n    email: \"juan.perez@universidad.edu\",\n    role: \"student\",\n    career: \"Ing. Desarrollo de Software\",\n    status: \"active\",\n    lastLogin: \"2024-01-15\",\n    createdAt: new Date(\"2024-01-01\")\n  }, {\n    id: 2,\n    name: \"María García\",\n    email: \"maria.garcia@universidad.edu\",\n    role: \"student\",\n    career: \"Ing. Forestal\",\n    status: \"active\",\n    lastLogin: \"2024-01-14\",\n    createdAt: new Date(\"2024-01-02\")\n  }, {\n    id: 3,\n    name: \"Dr. Carlos López\",\n    email: \"carlos.lopez@universidad.edu\",\n    role: \"works-admin\",\n    status: \"active\",\n    lastLogin: \"2024-01-16\",\n    createdAt: new Date(\"2023-12-01\")\n  }];\n  constructor() {\n    this.usersSubject.next(this.mockUsers);\n  }\n  getUsers() {\n    return this.users$;\n  }\n  getUserStats() {\n    return new BehaviorSubject({\n      total: 1270,\n      students: 1250,\n      admins: 20,\n      newToday: 5\n    }).asObservable();\n  }\n  getUsersByCareer() {\n    return new BehaviorSubject([{\n      career: \"Ing. Software\",\n      count: 450\n    }, {\n      career: \"Ing. Forestal\",\n      count: 320\n    }, {\n      career: \"Lic. Turística\",\n      count: 280\n    }, {\n      career: \"Lic. Biología\",\n      count: 350\n    }, {\n      career: \"Lic. C. Ambientales\",\n      count: 250\n    }]).asObservable();\n  }\n  static ɵfac = function UserService_Factory(t) {\n    return new (t || UserService)();\n  };\n  static ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: UserService,\n    factory: UserService.ɵfac,\n    providedIn: \"root\"\n  });\n}","map":{"version":3,"names":["BehaviorSubject","UserService","usersSubject","users$","asObservable","mockUsers","id","name","email","role","career","status","lastLogin","createdAt","Date","constructor","next","getUsers","getUserStats","total","students","admins","newToday","getUsersByCareer","count","factory","ɵfac","providedIn"],"sources":["C:\\Users\\albaa\\OneDrive\\Escritorio\\academic-works-system\\src\\app\\services\\user.service.ts"],"sourcesContent":["import { Injectable } from \"@angular/core\"\nimport { BehaviorSubject, type Observable } from \"rxjs\"\nimport type { User, UserStats } from \"../models/user.model\"\n\n@Injectable({\n  providedIn: \"root\",\n})\nexport class UserService {\n  private usersSubject = new BehaviorSubject<User[]>([])\n  public users$ = this.usersSubject.asObservable()\n\n  private mockUsers: User[] = [\n    {\n      id: 1,\n      name: \"Juan Pérez\",\n      email: \"juan.perez@universidad.edu\",\n      role: \"student\",\n      career: \"Ing. Desarrollo de Software\",\n      status: \"active\",\n      lastLogin: \"2024-01-15\",\n      createdAt: new Date(\"2024-01-01\"),\n    },\n    {\n      id: 2,\n      name: \"María García\",\n      email: \"maria.garcia@universidad.edu\",\n      role: \"student\",\n      career: \"Ing. Forestal\",\n      status: \"active\",\n      lastLogin: \"2024-01-14\",\n      createdAt: new Date(\"2024-01-02\"),\n    },\n    {\n      id: 3,\n      name: \"Dr. Carlos López\",\n      email: \"carlos.lopez@universidad.edu\",\n      role: \"works-admin\",\n      status: \"active\",\n      lastLogin: \"2024-01-16\",\n      createdAt: new Date(\"2023-12-01\"),\n    },\n  ]\n\n  constructor() {\n    this.usersSubject.next(this.mockUsers)\n  }\n\n  getUsers(): Observable<User[]> {\n    return this.users$\n  }\n\n  getUserStats(): Observable<UserStats> {\n    return new BehaviorSubject<UserStats>({\n      total: 1270,\n      students: 1250,\n      admins: 20,\n      newToday: 5,\n    }).asObservable()\n  }\n\n  getUsersByCareer(): Observable<any[]> {\n    return new BehaviorSubject([\n      { career: \"Ing. Software\", count: 450 },\n      { career: \"Ing. Forestal\", count: 320 },\n      { career: \"Lic. Turística\", count: 280 },\n      { career: \"Lic. Biología\", count: 350 },\n      { career: \"Lic. C. Ambientales\", count: 250 },\n    ]).asObservable()\n  }\n}\n"],"mappings":"AACA,SAASA,eAAe,QAAyB,MAAM;;AAMvD,OAAM,MAAOC,WAAW;EACdC,YAAY,GAAG,IAAIF,eAAe,CAAS,EAAE,CAAC;EAC/CG,MAAM,GAAG,IAAI,CAACD,YAAY,CAACE,YAAY,EAAE;EAExCC,SAAS,GAAW,CAC1B;IACEC,EAAE,EAAE,CAAC;IACLC,IAAI,EAAE,YAAY;IAClBC,KAAK,EAAE,4BAA4B;IACnCC,IAAI,EAAE,SAAS;IACfC,MAAM,EAAE,6BAA6B;IACrCC,MAAM,EAAE,QAAQ;IAChBC,SAAS,EAAE,YAAY;IACvBC,SAAS,EAAE,IAAIC,IAAI,CAAC,YAAY;GACjC,EACD;IACER,EAAE,EAAE,CAAC;IACLC,IAAI,EAAE,cAAc;IACpBC,KAAK,EAAE,8BAA8B;IACrCC,IAAI,EAAE,SAAS;IACfC,MAAM,EAAE,eAAe;IACvBC,MAAM,EAAE,QAAQ;IAChBC,SAAS,EAAE,YAAY;IACvBC,SAAS,EAAE,IAAIC,IAAI,CAAC,YAAY;GACjC,EACD;IACER,EAAE,EAAE,CAAC;IACLC,IAAI,EAAE,kBAAkB;IACxBC,KAAK,EAAE,8BAA8B;IACrCC,IAAI,EAAE,aAAa;IACnBE,MAAM,EAAE,QAAQ;IAChBC,SAAS,EAAE,YAAY;IACvBC,SAAS,EAAE,IAAIC,IAAI,CAAC,YAAY;GACjC,CACF;EAEDC,YAAA;IACE,IAAI,CAACb,YAAY,CAACc,IAAI,CAAC,IAAI,CAACX,SAAS,CAAC;EACxC;EAEAY,QAAQA,CAAA;IACN,OAAO,IAAI,CAACd,MAAM;EACpB;EAEAe,YAAYA,CAAA;IACV,OAAO,IAAIlB,eAAe,CAAY;MACpCmB,KAAK,EAAE,IAAI;MACXC,QAAQ,EAAE,IAAI;MACdC,MAAM,EAAE,EAAE;MACVC,QAAQ,EAAE;KACX,CAAC,CAAClB,YAAY,EAAE;EACnB;EAEAmB,gBAAgBA,CAAA;IACd,OAAO,IAAIvB,eAAe,CAAC,CACzB;MAAEU,MAAM,EAAE,eAAe;MAAEc,KAAK,EAAE;IAAG,CAAE,EACvC;MAAEd,MAAM,EAAE,eAAe;MAAEc,KAAK,EAAE;IAAG,CAAE,EACvC;MAAEd,MAAM,EAAE,gBAAgB;MAAEc,KAAK,EAAE;IAAG,CAAE,EACxC;MAAEd,MAAM,EAAE,eAAe;MAAEc,KAAK,EAAE;IAAG,CAAE,EACvC;MAAEd,MAAM,EAAE,qBAAqB;MAAEc,KAAK,EAAE;IAAG,CAAE,CAC9C,CAAC,CAACpB,YAAY,EAAE;EACnB;;qBA7DWH,WAAW;EAAA;;WAAXA,WAAW;IAAAwB,OAAA,EAAXxB,WAAW,CAAAyB,IAAA;IAAAC,UAAA,EAFV;EAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}