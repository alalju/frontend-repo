{"ast":null,"code":"import { BehaviorSubject, Observable } from \"rxjs\";\nimport * as i0 from \"@angular/core\";\nexport class UploadService {\n  uploadProgressSubject = new BehaviorSubject({\n    percentage: 0,\n    status: \"completed\"\n  });\n  uploadProgress$ = this.uploadProgressSubject.asObservable();\n  simulateUpload(file) {\n    return new Observable(observer => {\n      let progress = 0;\n      const interval = setInterval(() => {\n        progress += Math.random() * 15;\n        if (progress >= 100) {\n          progress = 100;\n          observer.next({\n            percentage: progress,\n            status: \"completed\",\n            message: \"Archivo subido exitosamente\"\n          });\n          observer.complete();\n          clearInterval(interval);\n        } else {\n          observer.next({\n            percentage: Math.floor(progress),\n            status: \"uploading\"\n          });\n        }\n      }, 200);\n    });\n  }\n  validateFile(file) {\n    const maxSize = 10 * 1024 * 1024; // 10MB\n    const allowedTypes = [\"application/pdf\", \"application/zip\", \"application/x-zip-compressed\"];\n    if (file.size > maxSize) {\n      return {\n        valid: false,\n        error: \"El archivo no puede ser mayor a 10MB\"\n      };\n    }\n    if (!allowedTypes.includes(file.type)) {\n      return {\n        valid: false,\n        error: \"Solo se permiten archivos PDF y ZIP\"\n      };\n    }\n    return {\n      valid: true\n    };\n  }\n  static ɵfac = function UploadService_Factory(t) {\n    return new (t || UploadService)();\n  };\n  static ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: UploadService,\n    factory: UploadService.ɵfac,\n    providedIn: \"root\"\n  });\n}","map":{"version":3,"names":["BehaviorSubject","Observable","UploadService","uploadProgressSubject","percentage","status","uploadProgress$","asObservable","simulateUpload","file","observer","progress","interval","setInterval","Math","random","next","message","complete","clearInterval","floor","validateFile","maxSize","allowedTypes","size","valid","error","includes","type","factory","ɵfac","providedIn"],"sources":["C:\\Users\\albaa\\OneDrive\\Escritorio\\academic-works-system\\src\\app\\services\\upload.service.ts"],"sourcesContent":["import { Injectable } from \"@angular/core\"\r\nimport { BehaviorSubject,  Observable } from \"rxjs\"\r\n\r\nexport interface UploadProgress {\r\n  percentage: number\r\n  status: \"uploading\" | \"completed\" | \"error\"\r\n  message?: string\r\n}\r\n\r\n@Injectable({\r\n  providedIn: \"root\",\r\n})\r\nexport class UploadService {\r\n  private uploadProgressSubject = new BehaviorSubject<UploadProgress>({ percentage: 0, status: \"completed\" })\r\n  public uploadProgress$ = this.uploadProgressSubject.asObservable()\r\n\r\n  simulateUpload(file: File): Observable<UploadProgress> {\r\n    return new Observable((observer) => {\r\n      let progress = 0\r\n      const interval = setInterval(() => {\r\n        progress += Math.random() * 15\r\n        if (progress >= 100) {\r\n          progress = 100\r\n          observer.next({ percentage: progress, status: \"completed\", message: \"Archivo subido exitosamente\" })\r\n          observer.complete()\r\n          clearInterval(interval)\r\n        } else {\r\n          observer.next({ percentage: Math.floor(progress), status: \"uploading\" })\r\n        }\r\n      }, 200)\r\n    })\r\n  }\r\n\r\n  validateFile(file: File): { valid: boolean; error?: string } {\r\n    const maxSize = 10 * 1024 * 1024 // 10MB\r\n    const allowedTypes = [\"application/pdf\", \"application/zip\", \"application/x-zip-compressed\"]\r\n\r\n    if (file.size > maxSize) {\r\n      return { valid: false, error: \"El archivo no puede ser mayor a 10MB\" }\r\n    }\r\n\r\n    if (!allowedTypes.includes(file.type)) {\r\n      return { valid: false, error: \"Solo se permiten archivos PDF y ZIP\" }\r\n    }\r\n\r\n    return { valid: true }\r\n  }\r\n}\r\n"],"mappings":"AACA,SAASA,eAAe,EAAGC,UAAU,QAAQ,MAAM;;AAWnD,OAAM,MAAOC,aAAa;EAChBC,qBAAqB,GAAG,IAAIH,eAAe,CAAiB;IAAEI,UAAU,EAAE,CAAC;IAAEC,MAAM,EAAE;EAAW,CAAE,CAAC;EACpGC,eAAe,GAAG,IAAI,CAACH,qBAAqB,CAACI,YAAY,EAAE;EAElEC,cAAcA,CAACC,IAAU;IACvB,OAAO,IAAIR,UAAU,CAAES,QAAQ,IAAI;MACjC,IAAIC,QAAQ,GAAG,CAAC;MAChB,MAAMC,QAAQ,GAAGC,WAAW,CAAC,MAAK;QAChCF,QAAQ,IAAIG,IAAI,CAACC,MAAM,EAAE,GAAG,EAAE;QAC9B,IAAIJ,QAAQ,IAAI,GAAG,EAAE;UACnBA,QAAQ,GAAG,GAAG;UACdD,QAAQ,CAACM,IAAI,CAAC;YAAEZ,UAAU,EAAEO,QAAQ;YAAEN,MAAM,EAAE,WAAW;YAAEY,OAAO,EAAE;UAA6B,CAAE,CAAC;UACpGP,QAAQ,CAACQ,QAAQ,EAAE;UACnBC,aAAa,CAACP,QAAQ,CAAC;QACzB,CAAC,MAAM;UACLF,QAAQ,CAACM,IAAI,CAAC;YAAEZ,UAAU,EAAEU,IAAI,CAACM,KAAK,CAACT,QAAQ,CAAC;YAAEN,MAAM,EAAE;UAAW,CAAE,CAAC;QAC1E;MACF,CAAC,EAAE,GAAG,CAAC;IACT,CAAC,CAAC;EACJ;EAEAgB,YAAYA,CAACZ,IAAU;IACrB,MAAMa,OAAO,GAAG,EAAE,GAAG,IAAI,GAAG,IAAI,EAAC;IACjC,MAAMC,YAAY,GAAG,CAAC,iBAAiB,EAAE,iBAAiB,EAAE,8BAA8B,CAAC;IAE3F,IAAId,IAAI,CAACe,IAAI,GAAGF,OAAO,EAAE;MACvB,OAAO;QAAEG,KAAK,EAAE,KAAK;QAAEC,KAAK,EAAE;MAAsC,CAAE;IACxE;IAEA,IAAI,CAACH,YAAY,CAACI,QAAQ,CAAClB,IAAI,CAACmB,IAAI,CAAC,EAAE;MACrC,OAAO;QAAEH,KAAK,EAAE,KAAK;QAAEC,KAAK,EAAE;MAAqC,CAAE;IACvE;IAEA,OAAO;MAAED,KAAK,EAAE;IAAI,CAAE;EACxB;;qBAlCWvB,aAAa;EAAA;;WAAbA,aAAa;IAAA2B,OAAA,EAAb3B,aAAa,CAAA4B,IAAA;IAAAC,UAAA,EAFZ;EAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}