{"ast":null,"code":"import { HttpParams } from \"@angular/common/http\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class TrabajoService {\n  http;\n  API_URL = \"http://localhost:8080/trabajos\"; // Ajusta la URL según tu configuración\n  constructor(http) {\n    this.http = http;\n  }\n  // Crear un nuevo trabajo\n  crearTrabajo(trabajoData, pdfFile, codigoFile) {\n    const formData = new FormData();\n    // Agregar datos del trabajo\n    formData.append(\"titulo\", trabajoData.titulo);\n    formData.append(\"resumen\", trabajoData.resumen);\n    formData.append(\"semestre\", trabajoData.semestre.toString());\n    formData.append(\"usuarioId\", trabajoData.usuarioId.toString());\n    formData.append(\"estadoId\", \"1\"); // Estado inicial (pendiente)\n    if (trabajoData.carreraId) {\n      formData.append(\"carreraId\", trabajoData.carreraId.toString());\n    }\n    if (trabajoData.materiaId) {\n      formData.append(\"materiaId\", trabajoData.materiaId.toString());\n    }\n    // Agregar archivos si existen\n    if (pdfFile) {\n      formData.append(\"filePdf\", pdfFile, pdfFile.name);\n    }\n    if (codigoFile) {\n      formData.append(\"fileCodigo\", codigoFile, codigoFile.name);\n    }\n    return this.http.post(this.API_URL, formData);\n  }\n  // Obtener trabajos del usuario\n  obtenerTrabajosDelUsuario(usuarioId) {\n    return this.http.get(`${this.API_URL}/usuario/${usuarioId}`);\n  }\n  // Obtener trabajo por ID\n  obtenerTrabajoPorId(id) {\n    return this.http.get(`${this.API_URL}/${id}`);\n  }\n  // Actualizar trabajo\n  actualizarTrabajo(id, trabajoData, pdfFile, codigoFile) {\n    const formData = new FormData();\n    formData.append(\"titulo\", trabajoData.titulo);\n    formData.append(\"resumen\", trabajoData.resumen);\n    formData.append(\"semestre\", trabajoData.semestre.toString());\n    if (trabajoData.carreraId) {\n      formData.append(\"carreraId\", trabajoData.carreraId.toString());\n    }\n    if (trabajoData.materiaId) {\n      formData.append(\"materiaId\", trabajoData.materiaId.toString());\n    }\n    if (pdfFile) {\n      formData.append(\"filePdf\", pdfFile, pdfFile.name);\n    }\n    if (codigoFile) {\n      formData.append(\"fileCodigo\", codigoFile, codigoFile.name);\n    }\n    return this.http.put(`${this.API_URL}/${id}`, formData);\n  }\n  // Eliminar trabajo\n  eliminarTrabajo(id, usuarioId) {\n    const params = new HttpParams().set(\"usuarioId\", usuarioId.toString());\n    return this.http.delete(`${this.API_URL}/${id}`, {\n      params\n    });\n  }\n  // Descargar archivo\n  descargarArchivo(trabajoId, tipoArchivo, usuarioId) {\n    const params = new HttpParams().set(\"usuarioId\", usuarioId.toString());\n    return this.http.get(`${this.API_URL}/${trabajoId}/descargar/${tipoArchivo}`, {\n      params,\n      responseType: \"blob\"\n    });\n  }\n  // Buscar trabajos\n  buscarTrabajos(usuarioId, filtros) {\n    let params = new HttpParams();\n    if (filtros.titulo) params = params.set(\"titulo\", filtros.titulo);\n    if (filtros.autor) params = params.set(\"autor\", filtros.autor);\n    if (filtros.carreraId) params = params.set(\"carreraId\", filtros.carreraId.toString());\n    if (filtros.fechaInicio) params = params.set(\"fechaInicio\", filtros.fechaInicio.toISOString());\n    if (filtros.fechaFin) params = params.set(\"fechaFin\", filtros.fechaFin.toISOString());\n    return this.http.get(`${this.API_URL}/buscar/${usuarioId}`, {\n      params\n    });\n  }\n  static ɵfac = function TrabajoService_Factory(t) {\n    return new (t || TrabajoService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: TrabajoService,\n    factory: TrabajoService.ɵfac,\n    providedIn: \"root\"\n  });\n}","map":{"version":3,"names":["HttpParams","TrabajoService","http","API_URL","constructor","crearTrabajo","trabajoData","pdfFile","codigoFile","formData","FormData","append","titulo","resumen","semestre","toString","usuarioId","carreraId","materiaId","name","post","obtenerTrabajosDelUsuario","get","obtenerTrabajoPorId","id","actualizarTrabajo","put","eliminarTrabajo","params","set","delete","descargarArchivo","trabajoId","tipoArchivo","responseType","buscarTrabajos","filtros","autor","fechaInicio","toISOString","fechaFin","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\Users\\albaa\\OneDrive\\Escritorio\\academic-works-system\\src\\app\\services\\trabajo.service.ts"],"sourcesContent":["import { Injectable } from \"@angular/core\"\r\nimport {HttpClient, HttpParams } from \"@angular/common/http\"\r\nimport type { Observable } from \"rxjs\"\r\n\r\nexport interface TrabajoDTO {\r\n  id?: number\r\n  titulo: string\r\n  resumen: string\r\n  semestre: number\r\n  publicado?: boolean\r\n  fechaEnvio?: string\r\n  fechaAprobacion?: string\r\n  comentariosRevision?: string\r\n  usuarioId: number\r\n  estadoId: number\r\n  materiaId?: number\r\n  carreraId?: number\r\n  // Nombres originales de archivos\r\n  archivoPdfOriginal?: string\r\n  codigoFuenteOriginal?: string\r\n}\r\n\r\nexport interface CarreraDTO {\r\n  id: number\r\n  nombre: string\r\n}\r\n\r\nexport interface MateriaDTO {\r\n  id: number\r\n  nombre: string\r\n  carreraId: number\r\n}\r\n\r\n@Injectable({\r\n  providedIn: \"root\",\r\n})\r\nexport class TrabajoService {\r\n  private readonly API_URL = \"http://localhost:8080/trabajos\" // Ajusta la URL según tu configuración\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  // Crear un nuevo trabajo\r\n  crearTrabajo(trabajoData: any, pdfFile?: File, codigoFile?: File): Observable<TrabajoDTO> {\r\n    const formData = new FormData()\r\n\r\n    // Agregar datos del trabajo\r\n    formData.append(\"titulo\", trabajoData.titulo)\r\n    formData.append(\"resumen\", trabajoData.resumen)\r\n    formData.append(\"semestre\", trabajoData.semestre.toString())\r\n    formData.append(\"usuarioId\", trabajoData.usuarioId.toString())\r\n    formData.append(\"estadoId\", \"1\") // Estado inicial (pendiente)\r\n\r\n    if (trabajoData.carreraId) {\r\n      formData.append(\"carreraId\", trabajoData.carreraId.toString())\r\n    }\r\n\r\n    if (trabajoData.materiaId) {\r\n      formData.append(\"materiaId\", trabajoData.materiaId.toString())\r\n    }\r\n\r\n    // Agregar archivos si existen\r\n    if (pdfFile) {\r\n      formData.append(\"filePdf\", pdfFile, pdfFile.name)\r\n    }\r\n\r\n    if (codigoFile) {\r\n      formData.append(\"fileCodigo\", codigoFile, codigoFile.name)\r\n    }\r\n\r\n    return this.http.post<TrabajoDTO>(this.API_URL, formData)\r\n  }\r\n\r\n  // Obtener trabajos del usuario\r\n  obtenerTrabajosDelUsuario(usuarioId: number): Observable<TrabajoDTO[]> {\r\n    return this.http.get<TrabajoDTO[]>(`${this.API_URL}/usuario/${usuarioId}`)\r\n  }\r\n\r\n  // Obtener trabajo por ID\r\n  obtenerTrabajoPorId(id: number): Observable<TrabajoDTO> {\r\n    return this.http.get<TrabajoDTO>(`${this.API_URL}/${id}`)\r\n  }\r\n\r\n  // Actualizar trabajo\r\n  actualizarTrabajo(id: number, trabajoData: any, pdfFile?: File, codigoFile?: File): Observable<TrabajoDTO> {\r\n    const formData = new FormData()\r\n\r\n    formData.append(\"titulo\", trabajoData.titulo)\r\n    formData.append(\"resumen\", trabajoData.resumen)\r\n    formData.append(\"semestre\", trabajoData.semestre.toString())\r\n\r\n    if (trabajoData.carreraId) {\r\n      formData.append(\"carreraId\", trabajoData.carreraId.toString())\r\n    }\r\n\r\n    if (trabajoData.materiaId) {\r\n      formData.append(\"materiaId\", trabajoData.materiaId.toString())\r\n    }\r\n\r\n    if (pdfFile) {\r\n      formData.append(\"filePdf\", pdfFile, pdfFile.name)\r\n    }\r\n\r\n    if (codigoFile) {\r\n      formData.append(\"fileCodigo\", codigoFile, codigoFile.name)\r\n    }\r\n\r\n    return this.http.put<TrabajoDTO>(`${this.API_URL}/${id}`, formData)\r\n  }\r\n\r\n  // Eliminar trabajo\r\n  eliminarTrabajo(id: number, usuarioId: number): Observable<void> {\r\n    const params = new HttpParams().set(\"usuarioId\", usuarioId.toString())\r\n    return this.http.delete<void>(`${this.API_URL}/${id}`, { params })\r\n  }\r\n\r\n  // Descargar archivo\r\n  descargarArchivo(trabajoId: number, tipoArchivo: string, usuarioId: number): Observable<Blob> {\r\n    const params = new HttpParams().set(\"usuarioId\", usuarioId.toString())\r\n    return this.http.get(`${this.API_URL}/${trabajoId}/descargar/${tipoArchivo}`, {\r\n      params,\r\n      responseType: \"blob\",\r\n    })\r\n  }\r\n\r\n  // Buscar trabajos\r\n  buscarTrabajos(\r\n    usuarioId: number,\r\n    filtros: {\r\n      titulo?: string\r\n      autor?: string\r\n      carreraId?: number\r\n      fechaInicio?: Date\r\n      fechaFin?: Date\r\n    },\r\n  ): Observable<TrabajoDTO[]> {\r\n    let params = new HttpParams()\r\n\r\n    if (filtros.titulo) params = params.set(\"titulo\", filtros.titulo)\r\n    if (filtros.autor) params = params.set(\"autor\", filtros.autor)\r\n    if (filtros.carreraId) params = params.set(\"carreraId\", filtros.carreraId.toString())\r\n    if (filtros.fechaInicio) params = params.set(\"fechaInicio\", filtros.fechaInicio.toISOString())\r\n    if (filtros.fechaFin) params = params.set(\"fechaFin\", filtros.fechaFin.toISOString())\r\n\r\n    return this.http.get<TrabajoDTO[]>(`${this.API_URL}/buscar/${usuarioId}`, { params })\r\n  }\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}