{"ast":null,"code":"import * as i0 from \"@angular/core\";\nexport class ConfigService {\n  // Configuración de microservicios\n  microservices = {\n    // Microservicio de trabajos académicos\n    trabajos: {\n      baseUrl: \"http://localhost:8081\",\n      contextPath: \"/api/alumnos\",\n      endpoints: {\n        trabajos: \"/trabajos\",\n        usuarios: \"/usuarios\",\n        estados: \"/estados\"\n      }\n    },\n    // Microservicio de gestión académica\n    academico: {\n      baseUrl: \"http://localhost:8082\",\n      contextPath: \"/api/academico\",\n      endpoints: {\n        carreras: \"/carreras\",\n        materias: \"/materias\",\n        semestres: \"/semestres\"\n      }\n    },\n    // Microservicio de autenticación (para futuro)\n    auth: {\n      baseUrl: \"http://localhost:8083\",\n      contextPath: \"/api/auth\",\n      endpoints: {\n        login: \"/login\",\n        register: \"/register\",\n        profile: \"/profile\"\n      }\n    },\n    // Microservicio de archivos/storage\n    storage: {\n      baseUrl: \"http://localhost:8084\",\n      contextPath: \"/api/storage\",\n      endpoints: {\n        upload: \"/upload\",\n        download: \"/download\",\n        delete: \"/delete\"\n      }\n    }\n  };\n  // Getters para URLs completas\n  get trabajosService() {\n    const service = this.microservices.trabajos;\n    return `${service.baseUrl}${service.contextPath}${service.endpoints.trabajos}`;\n  }\n  get carrerasService() {\n    const service = this.microservices.academico;\n    return `${service.baseUrl}${service.contextPath}${service.endpoints.carreras}`;\n  }\n  get materiasService() {\n    const service = this.microservices.academico;\n    return `${service.baseUrl}${service.contextPath}${service.endpoints.materias}`;\n  }\n  get usuariosService() {\n    const service = this.microservices.trabajos;\n    return `${service.baseUrl}${service.contextPath}${service.endpoints.usuarios}`;\n  }\n  get storageService() {\n    const service = this.microservices.storage;\n    return `${service.baseUrl}${service.contextPath}${service.endpoints.upload}`;\n  }\n  // Método para obtener URL personalizada\n  getServiceUrl(serviceName, endpoint) {\n    const service = this.microservices[serviceName];\n    return `${service.baseUrl}${service.contextPath}${endpoint}`;\n  }\n  // Método para verificar el estado de los servicios\n  getHealthCheckUrls() {\n    return {\n      trabajos: `${this.microservices.trabajos.baseUrl}${this.microservices.trabajos.contextPath}/health`,\n      academico: `${this.microservices.academico.baseUrl}${this.microservices.academico.contextPath}/health`,\n      auth: `${this.microservices.auth.baseUrl}${this.microservices.auth.contextPath}/health`,\n      storage: `${this.microservices.storage.baseUrl}${this.microservices.storage.contextPath}/health`\n    };\n  }\n  static ɵfac = function ConfigService_Factory(t) {\n    return new (t || ConfigService)();\n  };\n  static ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ConfigService,\n    factory: ConfigService.ɵfac,\n    providedIn: \"root\"\n  });\n}","map":{"version":3,"names":["ConfigService","microservices","trabajos","baseUrl","contextPath","endpoints","usuarios","estados","academico","carreras","materias","semestres","auth","login","register","profile","storage","upload","download","delete","trabajosService","service","carrerasService","materiasService","usuariosService","storageService","getServiceUrl","serviceName","endpoint","getHealthCheckUrls","factory","ɵfac","providedIn"],"sources":["C:\\Users\\albaa\\OneDrive\\Escritorio\\academic-works-system\\src\\app\\services\\config.service.ts"],"sourcesContent":["import { Injectable } from \"@angular/core\"\r\n\r\n@Injectable({\r\n  providedIn: \"root\",\r\n})\r\nexport class ConfigService {\r\n  // Configuración de microservicios\r\n  private readonly microservices = {\r\n    // Microservicio de trabajos académicos\r\n    trabajos: {\r\n      baseUrl: \"http://localhost:8081\",\r\n      contextPath: \"/api/alumnos\",\r\n      endpoints: {\r\n        trabajos: \"/trabajos\",\r\n        usuarios: \"/usuarios\",\r\n        estados: \"/estados\",\r\n      },\r\n    },\r\n    // Microservicio de gestión académica\r\n    academico: {\r\n      baseUrl: \"http://localhost:8082\",\r\n      contextPath: \"/api/academico\",\r\n      endpoints: {\r\n        carreras: \"/carreras\",\r\n        materias: \"/materias\",\r\n        semestres: \"/semestres\",\r\n      },\r\n    },\r\n    // Microservicio de autenticación (para futuro)\r\n    auth: {\r\n      baseUrl: \"http://localhost:8083\",\r\n      contextPath: \"/api/auth\",\r\n      endpoints: {\r\n        login: \"/login\",\r\n        register: \"/register\",\r\n        profile: \"/profile\",\r\n      },\r\n    },\r\n    // Microservicio de archivos/storage\r\n    storage: {\r\n      baseUrl: \"http://localhost:8084\",\r\n      contextPath: \"/api/storage\",\r\n      endpoints: {\r\n        upload: \"/upload\",\r\n        download: \"/download\",\r\n        delete: \"/delete\",\r\n      },\r\n    },\r\n  }\r\n\r\n  // Getters para URLs completas\r\n  get trabajosService(): string {\r\n    const service = this.microservices.trabajos\r\n    return `${service.baseUrl}${service.contextPath}${service.endpoints.trabajos}`\r\n  }\r\n\r\n  get carrerasService(): string {\r\n    const service = this.microservices.academico\r\n    return `${service.baseUrl}${service.contextPath}${service.endpoints.carreras}`\r\n  }\r\n\r\n  get materiasService(): string {\r\n    const service = this.microservices.academico\r\n    return `${service.baseUrl}${service.contextPath}${service.endpoints.materias}`\r\n  }\r\n\r\n  get usuariosService(): string {\r\n    const service = this.microservices.trabajos\r\n    return `${service.baseUrl}${service.contextPath}${service.endpoints.usuarios}`\r\n  }\r\n\r\n  get storageService(): string {\r\n    const service = this.microservices.storage\r\n    return `${service.baseUrl}${service.contextPath}${service.endpoints.upload}`\r\n  }\r\n\r\n  // Método para obtener URL personalizada\r\n  getServiceUrl(serviceName: keyof typeof this.microservices, endpoint: string): string {\r\n    const service = this.microservices[serviceName]\r\n    return `${service.baseUrl}${service.contextPath}${endpoint}`\r\n  }\r\n\r\n  // Método para verificar el estado de los servicios\r\n  getHealthCheckUrls(): { [key: string]: string } {\r\n    return {\r\n      trabajos: `${this.microservices.trabajos.baseUrl}${this.microservices.trabajos.contextPath}/health`,\r\n      academico: `${this.microservices.academico.baseUrl}${this.microservices.academico.contextPath}/health`,\r\n      auth: `${this.microservices.auth.baseUrl}${this.microservices.auth.contextPath}/health`,\r\n      storage: `${this.microservices.storage.baseUrl}${this.microservices.storage.contextPath}/health`,\r\n    }\r\n  }\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}