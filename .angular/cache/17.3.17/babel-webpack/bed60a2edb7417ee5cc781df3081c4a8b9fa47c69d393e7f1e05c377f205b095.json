{"ast":null,"code":"import { inject } from \"@angular/core\";\nimport { HttpClient, HttpParams } from \"@angular/common/http\";\nimport { ConfigService } from \"./config.service\";\nimport * as i0 from \"@angular/core\";\nexport class TrabajoService {\n  http = inject(HttpClient);\n  config = inject(ConfigService);\n  // URLs din√°micas basadas en configuraci√≥n de microservicios\n  get trabajosUrl() {\n    return this.config.trabajosService;\n  }\n  get usuariosUrl() {\n    return this.config.usuariosService;\n  }\n  get storageUrl() {\n    return this.config.storageService;\n  }\n  // Crear un nuevo trabajo\n  crearTrabajo(trabajoData, pdfFile, codigoFile) {\n    const formData = new FormData();\n    // Construir FormData\n    formData.append(\"titulo\", trabajoData.titulo);\n    formData.append(\"resumen\", trabajoData.resumen);\n    formData.append(\"semestre\", trabajoData.semestre.toString());\n    formData.append(\"usuarioId\", trabajoData.usuarioId.toString());\n    formData.append(\"estadoId\", \"1\");\n    if (trabajoData.carreraId) {\n      formData.append(\"carreraId\", trabajoData.carreraId.toString());\n    }\n    if (trabajoData.materiaId) {\n      formData.append(\"materiaId\", trabajoData.materiaId.toString());\n    }\n    if (pdfFile) {\n      formData.append(\"filePdf\", pdfFile, pdfFile.name);\n    }\n    if (codigoFile) {\n      formData.append(\"fileCodigo\", codigoFile, codigoFile.name);\n    }\n    console.log(\"üåê [TRABAJOS] Enviando petici√≥n POST a:\", this.trabajosUrl);\n    console.log(\"üì¶ FormData:\", {\n      titulo: trabajoData.titulo,\n      resumen: trabajoData.resumen,\n      semestre: trabajoData.semestre,\n      usuarioId: trabajoData.usuarioId,\n      carreraId: trabajoData.carreraId,\n      materiaId: trabajoData.materiaId,\n      pdfFile: pdfFile?.name,\n      codigoFile: codigoFile?.name\n    });\n    return this.http.post(this.trabajosUrl, formData);\n  }\n  // Obtener trabajos del usuario\n  obtenerTrabajosDelUsuario(usuarioId) {\n    const url = `${this.trabajosUrl}/usuario/${usuarioId}`;\n    console.log(\"üåê [TRABAJOS] GET:\", url);\n    return this.http.get(url);\n  }\n  // Obtener trabajo por ID\n  obtenerTrabajoPorId(id) {\n    const url = `${this.trabajosUrl}/${id}`;\n    console.log(\"üåê [TRABAJOS] GET:\", url);\n    return this.http.get(url);\n  }\n  // Actualizar trabajo\n  actualizarTrabajo(id, trabajoData, pdfFile, codigoFile) {\n    const formData = new FormData();\n    formData.append(\"titulo\", trabajoData.titulo);\n    formData.append(\"resumen\", trabajoData.resumen);\n    formData.append(\"semestre\", trabajoData.semestre.toString());\n    if (trabajoData.carreraId) {\n      formData.append(\"carreraId\", trabajoData.carreraId.toString());\n    }\n    if (trabajoData.materiaId) {\n      formData.append(\"materiaId\", trabajoData.materiaId.toString());\n    }\n    if (pdfFile) {\n      formData.append(\"filePdf\", pdfFile, pdfFile.name);\n    }\n    if (codigoFile) {\n      formData.append(\"fileCodigo\", codigoFile, codigoFile.name);\n    }\n    const url = `${this.trabajosUrl}/${id}`;\n    console.log(\"üåê [TRABAJOS] PUT:\", url);\n    return this.http.put(url, formData);\n  }\n  // Eliminar trabajo\n  eliminarTrabajo(id, usuarioId) {\n    const params = new HttpParams().set(\"usuarioId\", usuarioId.toString());\n    const url = `${this.trabajosUrl}/${id}`;\n    console.log(\"üåê [TRABAJOS] DELETE:\", url);\n    return this.http.delete(url, {\n      params\n    });\n  }\n  // Descargar archivo (podr√≠a usar microservicio de storage)\n  descargarArchivo(trabajoId, tipoArchivo, usuarioId) {\n    const params = new HttpParams().set(\"usuarioId\", usuarioId.toString());\n    const url = `${this.trabajosUrl}/${trabajoId}/descargar/${tipoArchivo}`;\n    console.log(\"üåê [TRABAJOS] GET Blob:\", url);\n    return this.http.get(url, {\n      params,\n      responseType: \"blob\"\n    });\n  }\n  // Buscar trabajos\n  buscarTrabajos(usuarioId, filtros) {\n    let params = new HttpParams();\n    if (filtros.titulo) params = params.set(\"titulo\", filtros.titulo);\n    if (filtros.autor) params = params.set(\"autor\", filtros.autor);\n    if (filtros.carreraId) params = params.set(\"carreraId\", filtros.carreraId.toString());\n    if (filtros.fechaInicio) params = params.set(\"fechaInicio\", filtros.fechaInicio.toISOString());\n    if (filtros.fechaFin) params = params.set(\"fechaFin\", filtros.fechaFin.toISOString());\n    const url = `${this.trabajosUrl}/buscar/${usuarioId}`;\n    console.log(\"üåê [TRABAJOS] GET Search:\", url);\n    return this.http.get(url, {\n      params\n    });\n  }\n  static …µfac = function TrabajoService_Factory(t) {\n    return new (t || TrabajoService)();\n  };\n  static …µprov = /*@__PURE__*/i0.…µ…µdefineInjectable({\n    token: TrabajoService,\n    factory: TrabajoService.…µfac,\n    providedIn: \"root\"\n  });\n}","map":{"version":3,"names":["inject","HttpClient","HttpParams","ConfigService","TrabajoService","http","config","trabajosUrl","trabajosService","usuariosUrl","usuariosService","storageUrl","storageService","crearTrabajo","trabajoData","pdfFile","codigoFile","formData","FormData","append","titulo","resumen","semestre","toString","usuarioId","carreraId","materiaId","name","console","log","post","obtenerTrabajosDelUsuario","url","get","obtenerTrabajoPorId","id","actualizarTrabajo","put","eliminarTrabajo","params","set","delete","descargarArchivo","trabajoId","tipoArchivo","responseType","buscarTrabajos","filtros","autor","fechaInicio","toISOString","fechaFin","factory","…µfac","providedIn"],"sources":["C:\\Users\\albaa\\OneDrive\\Escritorio\\academic-works-system\\src\\app\\services\\trabajo.service.ts"],"sourcesContent":["import { Injectable, inject } from \"@angular/core\"\r\nimport { HttpClient, HttpParams } from \"@angular/common/http\"\r\nimport type { Observable } from \"rxjs\"\r\nimport { ConfigService } from \"./config.service\"\r\n\r\nexport interface TrabajoDTO {\r\n  id?: number\r\n  titulo: string\r\n  resumen: string\r\n  semestre: number\r\n  publicado?: boolean\r\n  fechaEnvio?: string\r\n  fechaAprobacion?: string\r\n  comentariosRevision?: string\r\n  usuarioId: number\r\n  estadoId: number\r\n  materiaId?: number\r\n  carreraId?: number\r\n  archivoPdfOriginal?: string\r\n  codigoFuenteOriginal?: string\r\n}\r\n\r\n@Injectable({\r\n  providedIn: \"root\",\r\n})\r\nexport class TrabajoService {\r\n  private http: HttpClient = inject(HttpClient)\r\n  private config: ConfigService = inject(ConfigService)\r\n\r\n  // URLs din√°micas basadas en configuraci√≥n de microservicios\r\n  private get trabajosUrl(): string {\r\n    return this.config.trabajosService\r\n  }\r\n\r\n  private get usuariosUrl(): string {\r\n    return this.config.usuariosService\r\n  }\r\n\r\n  private get storageUrl(): string {\r\n    return this.config.storageService\r\n  }\r\n\r\n  // Crear un nuevo trabajo\r\n  crearTrabajo(trabajoData: any, pdfFile?: File, codigoFile?: File): Observable<TrabajoDTO> {\r\n    const formData = new FormData()\r\n\r\n    // Construir FormData\r\n    formData.append(\"titulo\", trabajoData.titulo)\r\n    formData.append(\"resumen\", trabajoData.resumen)\r\n    formData.append(\"semestre\", trabajoData.semestre.toString())\r\n    formData.append(\"usuarioId\", trabajoData.usuarioId.toString())\r\n    formData.append(\"estadoId\", \"1\")\r\n\r\n    if (trabajoData.carreraId) {\r\n      formData.append(\"carreraId\", trabajoData.carreraId.toString())\r\n    }\r\n\r\n    if (trabajoData.materiaId) {\r\n      formData.append(\"materiaId\", trabajoData.materiaId.toString())\r\n    }\r\n\r\n    if (pdfFile) {\r\n      formData.append(\"filePdf\", pdfFile, pdfFile.name)\r\n    }\r\n\r\n    if (codigoFile) {\r\n      formData.append(\"fileCodigo\", codigoFile, codigoFile.name)\r\n    }\r\n\r\n    console.log(\"üåê [TRABAJOS] Enviando petici√≥n POST a:\", this.trabajosUrl)\r\n    console.log(\"üì¶ FormData:\", {\r\n      titulo: trabajoData.titulo,\r\n      resumen: trabajoData.resumen,\r\n      semestre: trabajoData.semestre,\r\n      usuarioId: trabajoData.usuarioId,\r\n      carreraId: trabajoData.carreraId,\r\n      materiaId: trabajoData.materiaId,\r\n      pdfFile: pdfFile?.name,\r\n      codigoFile: codigoFile?.name,\r\n    })\r\n\r\n    return this.http.post<TrabajoDTO>(this.trabajosUrl, formData)\r\n  }\r\n\r\n  // Obtener trabajos del usuario\r\n  obtenerTrabajosDelUsuario(usuarioId: number): Observable<TrabajoDTO[]> {\r\n    const url = `${this.trabajosUrl}/usuario/${usuarioId}`\r\n    console.log(\"üåê [TRABAJOS] GET:\", url)\r\n    return this.http.get<TrabajoDTO[]>(url)\r\n  }\r\n\r\n  // Obtener trabajo por ID\r\n  obtenerTrabajoPorId(id: number): Observable<TrabajoDTO> {\r\n    const url = `${this.trabajosUrl}/${id}`\r\n    console.log(\"üåê [TRABAJOS] GET:\", url)\r\n    return this.http.get<TrabajoDTO>(url)\r\n  }\r\n\r\n  // Actualizar trabajo\r\n  actualizarTrabajo(id: number, trabajoData: any, pdfFile?: File, codigoFile?: File): Observable<TrabajoDTO> {\r\n    const formData = new FormData()\r\n\r\n    formData.append(\"titulo\", trabajoData.titulo)\r\n    formData.append(\"resumen\", trabajoData.resumen)\r\n    formData.append(\"semestre\", trabajoData.semestre.toString())\r\n\r\n    if (trabajoData.carreraId) {\r\n      formData.append(\"carreraId\", trabajoData.carreraId.toString())\r\n    }\r\n\r\n    if (trabajoData.materiaId) {\r\n      formData.append(\"materiaId\", trabajoData.materiaId.toString())\r\n    }\r\n\r\n    if (pdfFile) {\r\n      formData.append(\"filePdf\", pdfFile, pdfFile.name)\r\n    }\r\n\r\n    if (codigoFile) {\r\n      formData.append(\"fileCodigo\", codigoFile, codigoFile.name)\r\n    }\r\n\r\n    const url = `${this.trabajosUrl}/${id}`\r\n    console.log(\"üåê [TRABAJOS] PUT:\", url)\r\n    return this.http.put<TrabajoDTO>(url, formData)\r\n  }\r\n\r\n  // Eliminar trabajo\r\n  eliminarTrabajo(id: number, usuarioId: number): Observable<void> {\r\n    const params = new HttpParams().set(\"usuarioId\", usuarioId.toString())\r\n    const url = `${this.trabajosUrl}/${id}`\r\n    console.log(\"üåê [TRABAJOS] DELETE:\", url)\r\n    return this.http.delete<void>(url, { params })\r\n  }\r\n\r\n  // Descargar archivo (podr√≠a usar microservicio de storage)\r\n  descargarArchivo(trabajoId: number, tipoArchivo: string, usuarioId: number): Observable<Blob> {\r\n    const params = new HttpParams().set(\"usuarioId\", usuarioId.toString())\r\n    const url = `${this.trabajosUrl}/${trabajoId}/descargar/${tipoArchivo}`\r\n    console.log(\"üåê [TRABAJOS] GET Blob:\", url)\r\n    return this.http.get(url, {\r\n      params,\r\n      responseType: \"blob\",\r\n    })\r\n  }\r\n\r\n  // Buscar trabajos\r\n  buscarTrabajos(\r\n    usuarioId: number,\r\n    filtros: {\r\n      titulo?: string\r\n      autor?: string\r\n      carreraId?: number\r\n      fechaInicio?: Date\r\n      fechaFin?: Date\r\n    },\r\n  ): Observable<TrabajoDTO[]> {\r\n    let params = new HttpParams()\r\n\r\n    if (filtros.titulo) params = params.set(\"titulo\", filtros.titulo)\r\n    if (filtros.autor) params = params.set(\"autor\", filtros.autor)\r\n    if (filtros.carreraId) params = params.set(\"carreraId\", filtros.carreraId.toString())\r\n    if (filtros.fechaInicio) params = params.set(\"fechaInicio\", filtros.fechaInicio.toISOString())\r\n    if (filtros.fechaFin) params = params.set(\"fechaFin\", filtros.fechaFin.toISOString())\r\n\r\n    const url = `${this.trabajosUrl}/buscar/${usuarioId}`\r\n    console.log(\"üåê [TRABAJOS] GET Search:\", url)\r\n    return this.http.get<TrabajoDTO[]>(url, { params })\r\n  }\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}