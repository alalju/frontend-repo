{"ast":null,"code":"import { of } from \"rxjs\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class CarreraService {\n  http;\n  API_URL = \"http://localhost:8081/api/alumnos\";\n  constructor(http) {\n    this.http = http;\n  }\n  // Si tienes endpoints para carreras, úsalos. Si no, datos estáticos por ahora\n  obtenerCarreras() {\n    // Opción 1: Si tienes endpoint\n    // return this.http.get<CarreraDTO[]>(`${this.API_URL}/carreras`)\n    // Opción 2: Datos estáticos mientras no tengas el endpoint\n    const carreras = [{\n      id: 1,\n      nombre: \"Ing. Desarrollo de Software\"\n    }, {\n      id: 2,\n      nombre: \"Ing. Forestal\"\n    }, {\n      id: 3,\n      nombre: \"Lic. Administración Turística\"\n    }, {\n      id: 4,\n      nombre: \"Lic. Biología\"\n    }, {\n      id: 5,\n      nombre: \"Lic. Ciencias Ambientales\"\n    }];\n    return of(carreras);\n  }\n  obtenerMateriasPorCarrera(carreraId) {\n    // Opción 1: Si tienes endpoint\n    // return this.http.get<MateriaDTO[]>(`${this.API_URL}/materias/carrera/${carreraId}`)\n    // Opción 2: Datos estáticos por carrera\n    const materiasPorCarrera = {\n      1: [\n      // Ing. Desarrollo de Software\n      {\n        id: 1,\n        nombre: \"Programación Web\",\n        carreraId: 1\n      }, {\n        id: 2,\n        nombre: \"Base de Datos\",\n        carreraId: 1\n      }, {\n        id: 3,\n        nombre: \"Ingeniería de Software\",\n        carreraId: 1\n      }, {\n        id: 4,\n        nombre: \"Desarrollo Móvil\",\n        carreraId: 1\n      }],\n      2: [\n      // Ing. Forestal\n      {\n        id: 5,\n        nombre: \"Silvicultura\",\n        carreraId: 2\n      }, {\n        id: 6,\n        nombre: \"Manejo Forestal\",\n        carreraId: 2\n      }, {\n        id: 7,\n        nombre: \"Ecología Forestal\",\n        carreraId: 2\n      }],\n      3: [\n      // Lic. Administración Turística\n      {\n        id: 8,\n        nombre: \"Gestión Turística\",\n        carreraId: 3\n      }, {\n        id: 9,\n        nombre: \"Marketing Turístico\",\n        carreraId: 3\n      }, {\n        id: 10,\n        nombre: \"Patrimonio Cultural\",\n        carreraId: 3\n      }]\n    };\n    return of(materiasPorCarrera[carreraId] || []);\n  }\n  static ɵfac = function CarreraService_Factory(t) {\n    return new (t || CarreraService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: CarreraService,\n    factory: CarreraService.ɵfac,\n    providedIn: \"root\"\n  });\n}","map":{"version":3,"names":["of","CarreraService","http","API_URL","constructor","obtenerCarreras","carreras","id","nombre","obtenerMateriasPorCarrera","carreraId","materiasPorCarrera","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\Users\\albaa\\OneDrive\\Escritorio\\academic-works-system\\src\\app\\services\\carrera.service.ts"],"sourcesContent":["import { Injectable } from \"@angular/core\"\r\nimport { HttpClient } from \"@angular/common/http\"\r\nimport { type Observable, of } from \"rxjs\"\r\n\r\nexport interface CarreraDTO {\r\n  id: number\r\n  nombre: string\r\n}\r\n\r\nexport interface MateriaDTO {\r\n  id: number\r\n  nombre: string\r\n  carreraId: number\r\n}\r\n\r\n@Injectable({\r\n  providedIn: \"root\",\r\n})\r\nexport class CarreraService {\r\n  private readonly API_URL = \"http://localhost:8081/api/alumnos\"\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  // Si tienes endpoints para carreras, úsalos. Si no, datos estáticos por ahora\r\n  obtenerCarreras(): Observable<CarreraDTO[]> {\r\n    // Opción 1: Si tienes endpoint\r\n    // return this.http.get<CarreraDTO[]>(`${this.API_URL}/carreras`)\r\n\r\n    // Opción 2: Datos estáticos mientras no tengas el endpoint\r\n    const carreras: CarreraDTO[] = [\r\n      { id: 1, nombre: \"Ing. Desarrollo de Software\" },\r\n      { id: 2, nombre: \"Ing. Forestal\" },\r\n      { id: 3, nombre: \"Lic. Administración Turística\" },\r\n      { id: 4, nombre: \"Lic. Biología\" },\r\n      { id: 5, nombre: \"Lic. Ciencias Ambientales\" },\r\n    ]\r\n    return of(carreras)\r\n  }\r\n\r\n  obtenerMateriasPorCarrera(carreraId: number): Observable<MateriaDTO[]> {\r\n    // Opción 1: Si tienes endpoint\r\n    // return this.http.get<MateriaDTO[]>(`${this.API_URL}/materias/carrera/${carreraId}`)\r\n\r\n    // Opción 2: Datos estáticos por carrera\r\n    const materiasPorCarrera: { [key: number]: MateriaDTO[] } = {\r\n      1: [\r\n        // Ing. Desarrollo de Software\r\n        { id: 1, nombre: \"Programación Web\", carreraId: 1 },\r\n        { id: 2, nombre: \"Base de Datos\", carreraId: 1 },\r\n        { id: 3, nombre: \"Ingeniería de Software\", carreraId: 1 },\r\n        { id: 4, nombre: \"Desarrollo Móvil\", carreraId: 1 },\r\n      ],\r\n      2: [\r\n        // Ing. Forestal\r\n        { id: 5, nombre: \"Silvicultura\", carreraId: 2 },\r\n        { id: 6, nombre: \"Manejo Forestal\", carreraId: 2 },\r\n        { id: 7, nombre: \"Ecología Forestal\", carreraId: 2 },\r\n      ],\r\n      3: [\r\n        // Lic. Administración Turística\r\n        { id: 8, nombre: \"Gestión Turística\", carreraId: 3 },\r\n        { id: 9, nombre: \"Marketing Turístico\", carreraId: 3 },\r\n        { id: 10, nombre: \"Patrimonio Cultural\", carreraId: 3 },\r\n      ],\r\n    }\r\n\r\n    return of(materiasPorCarrera[carreraId] || [])\r\n  }\r\n}"],"mappings":"AAEA,SAA0BA,EAAE,QAAQ,MAAM;;;AAgB1C,OAAM,MAAOC,cAAc;EAGLC,IAAA;EAFHC,OAAO,GAAG,mCAAmC;EAE9DC,YAAoBF,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;EAAe;EAEvC;EACAG,eAAeA,CAAA;IACb;IACA;IAEA;IACA,MAAMC,QAAQ,GAAiB,CAC7B;MAAEC,EAAE,EAAE,CAAC;MAAEC,MAAM,EAAE;IAA6B,CAAE,EAChD;MAAED,EAAE,EAAE,CAAC;MAAEC,MAAM,EAAE;IAAe,CAAE,EAClC;MAAED,EAAE,EAAE,CAAC;MAAEC,MAAM,EAAE;IAA+B,CAAE,EAClD;MAAED,EAAE,EAAE,CAAC;MAAEC,MAAM,EAAE;IAAe,CAAE,EAClC;MAAED,EAAE,EAAE,CAAC;MAAEC,MAAM,EAAE;IAA2B,CAAE,CAC/C;IACD,OAAOR,EAAE,CAACM,QAAQ,CAAC;EACrB;EAEAG,yBAAyBA,CAACC,SAAiB;IACzC;IACA;IAEA;IACA,MAAMC,kBAAkB,GAAoC;MAC1D,CAAC,EAAE;MACD;MACA;QAAEJ,EAAE,EAAE,CAAC;QAAEC,MAAM,EAAE,kBAAkB;QAAEE,SAAS,EAAE;MAAC,CAAE,EACnD;QAAEH,EAAE,EAAE,CAAC;QAAEC,MAAM,EAAE,eAAe;QAAEE,SAAS,EAAE;MAAC,CAAE,EAChD;QAAEH,EAAE,EAAE,CAAC;QAAEC,MAAM,EAAE,wBAAwB;QAAEE,SAAS,EAAE;MAAC,CAAE,EACzD;QAAEH,EAAE,EAAE,CAAC;QAAEC,MAAM,EAAE,kBAAkB;QAAEE,SAAS,EAAE;MAAC,CAAE,CACpD;MACD,CAAC,EAAE;MACD;MACA;QAAEH,EAAE,EAAE,CAAC;QAAEC,MAAM,EAAE,cAAc;QAAEE,SAAS,EAAE;MAAC,CAAE,EAC/C;QAAEH,EAAE,EAAE,CAAC;QAAEC,MAAM,EAAE,iBAAiB;QAAEE,SAAS,EAAE;MAAC,CAAE,EAClD;QAAEH,EAAE,EAAE,CAAC;QAAEC,MAAM,EAAE,mBAAmB;QAAEE,SAAS,EAAE;MAAC,CAAE,CACrD;MACD,CAAC,EAAE;MACD;MACA;QAAEH,EAAE,EAAE,CAAC;QAAEC,MAAM,EAAE,mBAAmB;QAAEE,SAAS,EAAE;MAAC,CAAE,EACpD;QAAEH,EAAE,EAAE,CAAC;QAAEC,MAAM,EAAE,qBAAqB;QAAEE,SAAS,EAAE;MAAC,CAAE,EACtD;QAAEH,EAAE,EAAE,EAAE;QAAEC,MAAM,EAAE,qBAAqB;QAAEE,SAAS,EAAE;MAAC,CAAE;KAE1D;IAED,OAAOV,EAAE,CAACW,kBAAkB,CAACD,SAAS,CAAC,IAAI,EAAE,CAAC;EAChD;;qBAjDWT,cAAc,EAAAW,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;;WAAdd,cAAc;IAAAe,OAAA,EAAdf,cAAc,CAAAgB,IAAA;IAAAC,UAAA,EAFb;EAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}